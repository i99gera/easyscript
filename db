n,h,v=map(int,input().split())
all=[]
le=lambda e: [e,-1]
for w in range(h):
 all+=[list(map(le,input().split()))]
szcn=[]
for ith in range(h):
 for itv in range(v):
  if all[ith][itv][0] == '.':
   #print(szcn)
   if ith:
    if itv:
     if ith % 2:
      if all[ith-1][itv][0] == '.':
       all[ith][itv][1]=all[ith-1][itv][1]
       szcn[all[ith][itv][1]]+=1
      elif itv + 1 < v:
       #print(*all,ith,itv,sep='\n')
       if all[ith-1][itv+1][0] == '.' and all[ith][itv-1][0] == '.':
        if all[ith-1][itv+1][1] == all[ith][itv-1][1]:
         all[ith][itv][1]=all[ith][itv-1][1]
         szcn[all[ith][itv][1]]+=1
        else:
         #print(11111,ith,itv,*all,sep='\n')
         all[ith][itv][1]=all[ith][itv-1][1]
         szcn[all[ith][itv][1]]+=1+szcn[all[ith-1][itv+1][1]]
         #print(szcn)
         szcn[all[ith-1][itv+1][1]]=0
         frm=all[ith-1][itv+1][1]
         to=all[ith][itv-1][1]
         for w in range(itv):
          if all[ith][w][1] == frm:
           all[ith][w][1] = to
         for w in range(itv,v):
          if all[ith-1][w][1] == frm:
           all[ith-1][w][1] = to
       elif all[ith-1][itv+1][0] == '.':
        all[ith][itv][1]=all[ith-1][itv+1][1]
        szcn[all[ith][itv][1]]+=1
       elif all[ith][itv-1][0] == '.':
        all[ith][itv][1]=all[ith][itv-1][1]
        szcn[all[ith][itv][1]]+=1
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
      else:
       #print(11111111,ith,itv,all)
       if all[ith][itv-1][0]=='.':
        all[ith][itv][1]=all[ith][itv-1][1]
        szcn[all[ith][itv][1]]+=1
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
     else:
      if all[ith-1][itv-1][0] == '.':
       all[ith][itv][1]=all[ith-1][itv-1][1]
       szcn[all[ith][itv][1]]+=1
      else:
       if all[ith-1][itv][0] == '.' and all[ith][itv-1][0] == '.':
        if all[ith-1][itv][1] == all[ith][itv-1][1]:
         all[ith][itv][1]=all[ith][itv-1][1]
         szcn[all[ith][itv][1]]+=1
        else:
         #print(*all,11111,ith,itv,sep='\n')
         all[ith][itv][1]=all[ith][itv-1][1]
         szcn[all[ith][itv][1]]+=1+szcn[all[ith-1][itv][1]]
         #print(szcn)
         szcn[all[ith-1][itv][1]]=0
         frm=all[ith-1][itv-1+1][1]
         to=all[ith][itv-1][1]
         for w in range(itv):
          if all[ith][w][1] == frm:
           all[ith][w][1] = to
         for w in range(itv-1,v):
          if all[ith-1][w][1] == frm:
           all[ith-1][w][1] = to
         #print(*all,11111,ith,itv,sep='\n')
       elif all[ith-1][itv][0] == '.':
        all[ith][itv][1]=all[ith-1][itv][1]
        szcn[all[ith][itv][1]]+=1
       elif all[ith][itv-1][0] == '.':
        all[ith][itv][1]=all[ith][itv-1][1]
        szcn[all[ith][itv][1]]+=1
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
    else:
     if ith % 2:
      if all[ith-1][itv][0] == '.':
       all[ith][itv][1]=all[ith-1][itv][1]
       szcn[all[ith][itv][1]]+=1
      else:
       if itv +1 < v and all[ith-1][itv+1][0] == '.':
        all[ith][itv][1]=all[ith-1][itv+1][1]
        szcn[all[ith][itv][1]]+=1
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
     else:
      if all[ith-1][itv][0] == '.':
       all[ith][itv][1]=all[ith-1][itv][1]
       szcn[all[ith][itv][1]]+=1
      else:
       all[ith][itv][1]=len(szcn)
       szcn.append(1)
   else:
    if itv:
     if all[ith][itv-1][0] == '.':
      all[ith][itv][1]=all[ith][itv-1][1]
      szcn[all[ith][itv][1]]+=1
     else:
      all[ith][itv][1]=len(szcn)
      szcn.append(1)
    else:
     szcn.append(1)
     all[ith][itv][1]=0
szcn=[w for w in szcn if w != 0]
szcn.sort()
print(szcn)
exit()
s=szcn
s=s[::-1]
x=0
while n > 0:
 x+=1
 n-=s[0]
 s=s[1:]
print(x)
llint a,s,d,e
scan(a,s)
d=s-2
e=1
while d>0:
 if d&1:
  e*=a
  e%=s
 a*=a
 a%=s
 d=d>>1
print (e)
n,h,v=map(int,input().split())
all=[]
le=lambda e: [e,-1]
for w in range(h):
 all+=[list(map(le,input().split()))]
szcn=[]
for ith in range(h):
 for itv in range(v):
  if all[ith][itv][0] == '.':
   #print(szcn)
   if ith:
    if itv:
     if ith % 2:
      if all[ith-1][itv][0] == '.':
       all[ith][itv][1]=all[ith-1][itv][1]
       szcn[all[ith][itv][1]]+=1
      elif itv + 1 < v:
       #print(*all,ith,itv,sep='\n')
       if all[ith-1][itv+1][0] == '.' and all[ith][itv-1][0] == '.':
        if all[ith-1][itv+1][1] == all[ith][itv-1][1]:
         all[ith][itv][1]=all[ith][itv-1][1]
         szcn[all[ith][itv][1]]+=1
        else:
         #print(11111,ith,itv,*all,sep='\n')
         all[ith][itv][1]=all[ith][itv-1][1]
         szcn[all[ith][itv][1]]+=1+szcn[all[ith-1][itv+1][1]]
         #print(szcn)
         szcn[all[ith-1][itv+1][1]]=0
         frm=all[ith-1][itv+1][1]
         to=all[ith][itv-1][1]
         for w in range(itv):
          if all[ith][w][1] == frm:
           all[ith][w][1] = to
         for w in range(itv,v):
          if all[ith-1][w][1] == frm:
           all[ith-1][w][1] = to
       elif all[ith-1][itv+1][0] == '.':
        all[ith][itv][1]=all[ith-1][itv+1][1]
        szcn[all[ith][itv][1]]+=1
       elif all[ith][itv-1][0] == '.':
        all[ith][itv][1]=all[ith][itv-1][1]
        szcn[all[ith][itv][1]]+=1
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
      else:
       #print(11111111,ith,itv,all)
       if all[ith][itv-1][0]=='.':
        all[ith][itv][1]=all[ith][itv-1][1]
        szcn[all[ith][itv][1]]+=1
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
     else:
      if all[ith-1][itv-1][0] == '.':
       all[ith][itv][1]=all[ith-1][itv-1][1]
       szcn[all[ith][itv][1]]+=1
      else:
       if all[ith-1][itv][0] == '.' and all[ith][itv-1][0] == '.':
        if all[ith-1][itv][1] == all[ith][itv-1][1]:
         all[ith][itv][1]=all[ith][itv-1][1]
         szcn[all[ith][itv][1]]+=1
        else:
         #print(*all,11111,ith,itv,sep='\n')
         all[ith][itv][1]=all[ith][itv-1][1]
         szcn[all[ith][itv][1]]+=1+szcn[all[ith-1][itv][1]]
         #print(szcn)
         szcn[all[ith-1][itv][1]]=0
         frm=all[ith-1][itv-1+1][1]
         to=all[ith][itv-1][1]
         for w in range(itv):
          if all[ith][w][1] == frm:
           all[ith][w][1] = to
         for w in range(itv-1,v):
          if all[ith-1][w][1] == frm:
           all[ith-1][w][1] = to
         #print(*all,11111,ith,itv,sep='\n')
       elif all[ith-1][itv][0] == '.':
        all[ith][itv][1]=all[ith-1][itv][1]
        szcn[all[ith][itv][1]]+=1
       elif all[ith][itv-1][0] == '.':
        all[ith][itv][1]=all[ith][itv-1][1]
        szcn[all[ith][itv][1]]+=1
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
    else:
     if ith % 2:
      if all[ith-1][itv][0] == '.':
       all[ith][itv][1]=all[ith-1][itv][1]
       szcn[all[ith][itv][1]]+=1
      else:
       if itv +1 < v and all[ith-1][itv+1][0] == '.':
        all[ith][itv][1]=all[ith-1][itv+1][1]
        szcn[all[ith][itv][1]]+=1
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
     else:
      if all[ith-1][itv][0] == '.':
       all[ith][itv][1]=all[ith-1][itv][1]
       szcn[all[ith][itv][1]]+=1
      else:
       all[ith][itv][1]=len(szcn)
       szcn.append(1)
   else:
    if itv:
     if all[ith][itv-1][0] == '.':
      all[ith][itv][1]=all[ith][itv-1][1]
      szcn[all[ith][itv][1]]+=1
     else:
      all[ith][itv][1]=len(szcn)
      szcn.append(1)
    else:
     szcn.append(1)
     all[ith][itv][1]=0
szcn=[w for w in szcn if w != 0]
szcn.sort()
#print(szcn)
#exit()
s=szcn
s=s[::-1]
x=0
while n > 0:
 x+=1
 n-=s[0]
 s=s[1:]
print(x)
n,h,v=map(int,input().split())
all=[]
le=lambda e: [e,-1]
for w in range(h):
 all+=[list(map(le,input().split()))]
szcn=[]
for ith in range(h):
 for itv in range(v):
  if all[ith][itv][0] == '.':
   #print(szcn)
   if ith:
    if itv:
     if ith % 2:
      if all[ith-1][itv][0] == '.':
       #print(*all,sep='\n')
       inc=all[ith-1][itv][1]
       if szcn[inc] < 0:
        inc = -2-szcn[inc]
       szcn[inc]+=1
       all[ith][itv][1]=inc
      elif itv + 1 < v:
       #print(*all,ith,itv,sep='\n')
       if all[ith-1][itv+1][0] == '.' and all[ith][itv-1][0] == '.':
        in1 = all[ith-1][itv+1][1]
        if szcn[in1] < 0:
         in1 = -2-szcn[in1]
        in2 = all[ith][itv-1][1]
        if szcn[in2] < 0:
         in2 = -2-szcn[in2]
        if in1 == in2:
         inc=all[ith][itv-1][1]
         if szcn[inc] < 0:
          inc = -2-szcn[inc]
         szcn[inc]+=1
         all[ith][itv][1]=inc
        else:
         #print(11111,ith,itv,*all,sep='\n')
         all[ith][itv][1]=in1
         szcn[in1]+=1+szcn[in2]
         #print(szcn)
         szcn[in2]=-2-in1
       elif all[ith-1][itv+1][0] == '.':
        inc=all[ith-1][itv+1][1]
        if szcn[inc] < 0:
         inc = -2-szcn[inc]
        szcn[inc]+=1
        all[ith][itv][1]=inc
       elif all[ith][itv-1][0] == '.':
        inc=all[ith][itv-1][1]
        if szcn[inc] < 0:
         inc = -2-szcn[inc]
        szcn[inc]+=1
        all[ith][itv][1]=inc
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
      else:
       #print(11111111,ith,itv,all)
       if all[ith][itv-1][0]=='.':
        inc=all[ith][itv-1][1]
        if szcn[inc] < 0:
         inc = -2-szcn[inc]
        szcn[inc]+=1
        all[ith][itv][1]=inc
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
     else:
      if all[ith-1][itv-1][0] == '.':
       inc=all[ith-1][itv-1][1]
       if szcn[inc] < 0:
        inc = -2-szcn[inc]
       szcn[inc]+=1
       all[ith][itv][1]=inc
      else:
       if all[ith-1][itv][0] == '.' and all[ith][itv-1][0] == '.':
        in1 = all[ith-1][itv][1]
        if szcn[in1] < 0:
         in1=-2-szcn[in1]
        in2 = all[ith][itv-1][1]
        if szcn[in2] < 0:
         in2=-2-szcn[in2]
        if in1 == in2:
         inc=all[ith][itv-1][1]
         if szcn[inc] < 0:
          inc = -2-szcn[inc]
         szcn[inc]+=1
         all[ith][itv][1]=inc
        else:
         #print(*all,ith,itv,in1,in2,sep='\n')
         szcn[in1]+=1+szcn[in2]
         szcn[in2]=-2-in1
         all[ith][itv][1]=in1
         #print(*all,11111,ith,itv,sep='\n')
       elif all[ith-1][itv][0] == '.':
        inc=all[ith-1][itv][1]
        if szcn[inc] < 0:
         inc = -2-szcn[inc]
        szcn[inc]+=1
        all[ith][itv][1]=inc
       elif all[ith][itv-1][0] == '.':
        inc=all[ith][itv-1][1]
        if szcn[inc] < -1:
         inc = -2-szcn[inc]
        szcn[inc]+=1
        all[ith][itv][1]=inc
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
    else:
     if ith % 2:
      if all[ith-1][itv][0] == '.':
       inc=all[ith-1][itv][1]
       if szcn[inc] < -1:
        inc = -2-szcn[inc]
       szcn[inc]+=1
       all[ith][itv][1]=inc
      else:
       if itv +1 < v and all[ith-1][itv+1][0] == '.':
        inc=all[ith-1][itv+1][1]
        if szcn[inc] < 0:
         inc = -2-szcn[inc]
        szcn[inc]+=1
        all[ith][itv][1]=inc
       else:
        all[ith][itv][1]=len(szcn)
        szcn.append(1)
     else:
      if all[ith-1][itv][0] == '.':
       inc=all[ith-1][itv][1]
       if szcn[inc] < 0:
        inc = -2-szcn[inc]
       szcn[inc]+=1
       all[ith][itv][1]=inc
      else:
       all[ith][itv][1]=len(szcn)
       szcn.append(1)
   else:
    if itv:
     if all[ith][itv-1][0] == '.':
      inc=all[ith][itv-1][1]
      if szcn[inc] < 0:
       inc = -2-szcn[inc]
      szcn[inc]+=1
      all[ith][itv][1]=inc
     else:
      all[ith][itv][1]=len(szcn)
      szcn.append(1)
    else:
     szcn.append(1)
     all[ith][itv][1]=0

szcn=[w for w in szcn if w > 0]
#print(*all,sep='\n')
szcn.sort()
#print(szcn)
#exit()
s=szcn
s=s[::-1]
x=0
while n > 0:
 x+=1
 n-=s[0]
 s=s[1:]
print(x)
from urllib.request import urlopen
str q[10]
while q[0]!='e'or q[1]!='n' or q[2]!='d' or strlen(q)!=3:
 scan(`q)
 print(q)
#!/data/data/com.termux/files/usr/bin/python
from http.server import BaseHTTPRequestHandler, HTTPServer
import time
from urllib.request import urlopen as u
from urllib.parse import unquote as uqu
from sys import argv
import os
import random

q=[w.split() for w in os.popen('ifconfig').read().split('\n')]
q=[w[1].split(':')[1] for w in q if len(w) and w[0] == 'inet']
print('='*10,*enumerate(q),sep='\n')
if len(argv) > 1:
 argv1=argv[1]
 if argv1 in [w[:len(argv1)] for w in q]:
  q=[w for w in q if w[:len(argv1)] == argv1]
print('='*10,*enumerate(q),sep='\n')
if len(argv) > 2:
 port=int(argv[2])
else:
 port=9000
if len(argv) > 3:
 img='/nekopara/'+argv[3]
else:
 img='/nekopara.jpg'
if len(argv) > 4:
 arhvstin=argv[4]
else:
 arhvstin='arhvstin'
if len(q) > 1:
 e=int(input())
else:
 e=0
q=q[e]
hostName = q
hostPort = port

class MyServer(BaseHTTPRequestHandler):
 def do_CONNECT(self):
  print(dir(self))
 def do_GET(self):
  if os.path.exists('exit'):
   raise KeyboardInterrupt
  print('start')
  self.send_response(200)
  path='.'+uqu(self.path).replace(arhvstin,'..')
  #print(path)
  if '?' in path:
   self.send_header("Content-type", "text/html; charset=utf-8")
   self.end_headers()
   self.wfile.write(bytes(~
   <html>
   <head>
   <meta http-equiv="refresh" content="1;URL=.">
   </meta>
   </head>
   <body>
   <style type=text/css>
    #neko {position: fixed; top:0; botom:0; left:0; right:0}
    #main {position: absolute; top:0; left:0}
    wi {background: #00ff00}
    </style>
   <div id="neko">
    <img src="~+img+~" width="100%"><br>
    <img src="~+img+~" width="100%"><br>
    <img src="~+img+~" width="100%"></div>
   </body>
   </html>~, "utf-8"))

  elif os.path.isdir(path):
   if img == '/nekopara.jpg':
    os.system('cp nekopara/'+random.choice(os.listdir('nekopara'))+' nekopara.jpg')
   a=open('clip')
   clip=a.read()
   a.close()
   self.send_header("Content-type", "text/html; charset=utf-8")
   self.end_headers()
   self.wfile.write(bytes(~
   <html>
   <head>
   <title>~+path+~</title>
   </head>
   <style type=text/css>
    #neko {position: fixed; top:0; botom:0; left:0; right:0}
    #main {position: absolute; top:0; left:0}
    wi {background: #00ff00}
    </style>
   <body>
   <div id="neko">
    <img src="~+img+~" width="100%"><br>
    <img src="~+img+~" width="100%"><br>
    <img src="~+img+~" width="100%"></div>

   <div id="main">
    <h1>
    <form enctype="multipart/form-data" method="post">
     <wi><input type="file" name="u">
     <input type="submit" value="upload"></form></wi>
    </h1>
    <wi>===</wi>

   <wi><form method="post">
   <textarea name="c">~+clip+~</textarea><br>
   <input type="submit" value="save"></form></wi>
   <wi>===</wi>

   <form><button formaction="../">
   <h1>..<img src="/favicon.ico" height="25"></h1>
   </button></form>
   <wi>===</wi>

   ~,'utf-8'))

   for w in os.listdir(path):
    self.wfile.write(bytes(~
    <form><button formaction="~+w+~/">
    <h1>~+w+~
    <img src="/favicon.ico" height="25">~*int(os.path.isdir(path+w))+~
    </h1></button></form>~,'utf-8'))

   self.wfile.write(bytes(~</div></body></html>~, "utf-8"))

  elif os.path.isfile(path):
   self.send_header("Content-type", "file/file")
   self.end_headers()
   q=open(path,'br').read()
   self.wfile.write(q)

  elif os.path.isfile(path[:-1]) and path[-1] == '/':
   self.send_header("Content-type", "text/html; charset=utf-8")
   self.end_headers()
   self.wfile.write(bytes(~
   <html><head><title>~+path+~</title>
   </head>
   <body>
   <style type=text/css>
    #neko {position: fixed; top:0; botom:0; left:0; right:0}
    #main {position: absolute; top:0; left:0}
    wi {background: #00ff00}
    </style>
   <div id="neko">
    <img src="~+img+~" width="100%"><br>
    <img src="~+img+~" width="100%"><br>
    <img src="~+img+~" width="100%"></div>
   <div id="main">
   <h1>
   <form><button formaction="../">
   ..<img src="/favicon.ico" height="25">
   </button></form>
   <wi>~+path[1:-1]+~</wi><br>
   </h1>
   <a href="~+path[1:-1].replace('..',arhvstin)+~"><img src='/download.png' width=100%></a><br>
   </div></body></html>
   ~, "utf-8"))
  else:
   self.send_header("Content-type", "text/html; charset=utf-8")
   self.end_headers()
   self.wfile.write(bytes("<html><head><title>"+path+"</title></head>", "utf-8"))
   self.wfile.write(bytes('<body><p>not found<br>'+path[1:]+'</p></body></html>', "utf-8"))
  print('end')

 def do_POST(self):
  print('start')
  lenn=int(self.headers['Content-Length'])
  data=self.rfile.read(lenn)
  self.send_response(200)
  self.send_header("Content-type", "text/html; charset=utf-8")
  self.end_headers()
  self.wfile.write(bytes('<html><head><meta http-equiv="refresh" content="1;URL=."></meta></head></html>', "utf-8"))
  data=bytearray(data)
  rn=bytearray('\r\n','utf-8')
  data=data.split(rn)
  print(data)
  if len(data) and data[0][:6] == bytearray('------','utf-8'):
   fn=data[1].decode()
   fn=fn[:-1][::-1]
   fn=fn[:fn.index('"')][::-1]
   print(self.path+fn)
   f=[]
   for w in range(len(data)):
    if len(data[w]) == 0:
     f+=[w]
   #print(f)
   data=data[f[0]+1:f[-1]-1]
   ext=data[0]
   while len(data)>1:
    data=data[1:]
    ext+=rn+data[0]
   if len(fn):
    path='.'+uqu(self.path).replace(arhvstin,'..')
    fil=path+fn
    if os.path.exists(fil):
     d=0
     while os.path.exists(fil+str(d)):
      d+=1
     a=open(fil+str(d),'wb')
    else:
     a=open(fil,'wb')
    a.write(ext)
    a.close()
  else:
   ext=data[0]
   while len(data)>1:
    data=data[1:]
    ext+=rn+data[0]
   clip=ext.decode()[2:]
   clip=uqu(clip)
   print(clip)
   a=open('clip','w')
   a.write(clip)
   a.close()
  print('end')

st=1
while st:
 try:
  myServer = HTTPServer((hostName, hostPort), MyServer)
  st=0
 except:
  hostPort+=1
print(time.asctime(), "Server Starts - %s:%s" % (hostName, hostPort))

try:
    myServer.serve_forever()
except KeyboardInterrupt:
    pass

myServer.server_close()
print()
print(time.asctime(), "Server Stops - %s:%s" % (hostName, hostPort))
int a,s,d,e
scan(a,s,d)
e=1
a%=d
while s>0:
 if s%2:
  e*=a
  e%=d
 s/=2
 a*=a
 a%=d
print(e)
from os import system as sh
from sys import argv
sh('factor '+argv[1]+' > log')
q=open('log').read()
print(q)
print('hello world')
int q,a[10],w
for q<10:w in a:
 scan(w)
for q<10:
 print(a[q])
import os,time,random
term=os.get_terminal_size
os.system('>key')
print('\n'*(term()[1]-2))
ls=0
q=5
a=5
f='d'
lf='d'
sn=[[5,w] for w in range(5,30)][::-1]
eq=random.randint(0,term()[1]*2-11)
ea=random.randint(0,term()[0]-1)
fc=list(range(30,38))+list(range(90,98))
bc=list(range(40,48))+list(range(100,108))
bd=[]
bdc=0
bdi=0
bdl=0
bdm=5
bdw=200
tab=8
fs=''
ma=0
aver=0
llen=0
ma=len(sn)
aver=len(sn)/1.0
llen=1
col=0
ons=[]
while 1:
 if col==1:
  print('\x1b['+str(random.choice(fc))+';'+str(random.choice(bc))+'m')
 if col==2:
  print('\x1b[5;'+str(random.choice(fc))+';'+str(random.choice(bc))+'m')
 print('\x1b[2j\x1b[H')
 ns=sn[:]
 ns+=[[ea,eq]]
 ns+=bd
 pns=[w for w in ns if w not in ons]
 mns=[w for w in ons if w not in ns]
 print('\x1b[33m')
 for w in pns:
  if w[1]%2:
   if [w[0],w[1]-1] in ns:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H█')
   else:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H▄')
  else:
   if [w[0],w[1]+1] in ns:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H█')
   else:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H▀')
 for w in mns:
  if w[1]%2:
   if [w[0],w[1]-1] in ns:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H▀')
   else:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H ')
  else:
   if [w[0],w[1]+1] in ns:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H▄')
   else:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H ')
 ons=ns[:]
 print('\x1b[35m')
 print('\x1b['+str(term()[1]-3)+';0H'+'  '*term()[0])
 print('\x1b['+str(term()[1]-2)+';0H'+'now:',len(sn),'max:',ma,'aver:',aver)
 print('\x1b['+str(term()[1]-3)+';0H'+'█'*(bdl*term()[0]//bdw)+int(bool(max(bdl,0)))*chr(9615-max(bdl,0)*term()[0]*8//bdw%8))
 print('\x1b['+str(term()[1]-4)+';0H'+'═'*term()[0])
 if bdc==bdm:
  bdq=random.randint(1,term()[1]*2-12)
  bda=random.randint(1,term()[0]-2)
  bd+=[[bda-1,bdq-1]]
  bd+=[[bda+1,bdq-1]]
  bd+=[[bda-1,bdq+1]]
  bd+=[[bda+1,bdq+1]]
  bd+=[[bda+1,bdq]]
  bd+=[[bda-1,bdq]]
  bd+=[[bda,bdq+1]]
  bd+=[[bda,bdq-1]]
  bd+=[[bda,bdq]]
  bdc=bdm+1
  bdl=bdw
 elif bdc==0:
  bd=[]
 if bdl==0:
  bd=[]
  bdc=0
 bdl-=1
 nls=int(os.popen('ls -l key').read().split()[4])
 z=open('key')
 z.read(ls)
 fs+=z.read(nls-ls)
 z.close()
 ls=nls
 if fs=='\x1b[A':
  fs='w'
 if fs=='\x1b[B':
  fs='s'
 if fs=='\x1b[C':
  fs='d'
 if fs=='\x1b[D':
  fs='a'
 fs=''.join([fff for fff in fs if fff in 'asdwp'])
 if fs== '':
  fs=f
 if 1:
  f=fs[0]
  fs=fs[1:]
  if   f=='w':
   if lf == 's':
    q+=1
   else:
    q-=1
    lf=f
   q%=term()[1]*2-10
  elif f=='a':
   if lf == 'd':
    a+=1
   else:
    a-=1
    lf=f
   a%=term()[0]
  elif f=='s':
   if  lf == 'w':
    q-=1
   else:
    q+=1
    lf=f
   q%=term()[1]*2-10
  elif f=='d':
   if lf == 'a':
    a-=1
   else:
    a+=1
    lf=f
   a%=term()[0]
  elif f=='p':
   print('\x1b[0m')
   print('\x1b[0;0H'+' '*term()[0]*(term()[1]-2))
   print('\x1b[2j\x1b[0;0H',end='')
   exit()
 if [a,q] in sn:
  sn=sn[sn.index([a,q])+1:]
  ma=max(ma,len(sn)+bdi)
  aver=(aver*llen+len(sn))/(llen+1)
  llen+=1
 if ea==a and eq==q:
  bdc+=1
  eq=random.randint(0,term()[1]*2-11)
  ea=random.randint(0,term()[0]-1)
  sn=sn[:]+[[a,q]]
  ma=max(ma,len(sn)+bdi)
  aver=(aver*llen+len(sn))/(llen+1)
  llen+=1
 elif [a,q] in bd:
  bdi=15*bdl//bdw
  bdm=10*bdl//bdw+1
  bd=[]
  bdc=0
  bdl=0
  bdi-=1
  sn=sn[:]+[[a,q]]
  ma=max(ma,len(sn)+bdi)
  aver=(aver*llen+len(sn))/(llen+1)
  llen+=1
 elif bdi:
  bdi-=1
  sn=sn[:]+[[a,q]]
  ma=max(ma,len(sn)+bdi)
  aver=(aver*llen+len(sn))/(llen+1)
  llen+=1
 else:
  sn=sn[1:]+[[a,q]]
 #time.sleep(0.5)
int q
scan(q)
print(q)
import time,sys,tty,termios,os
class _Getch:
    def __call__(self):
            fd = sys.stdin.fileno()
            old_settings = termios.tcgetattr(fd)
            try:
                tty.setraw(sys.stdin.fileno())
                ch = sys.stdin.read(1)
            finally:
                termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
            return ch

os.system('python game.py &')
inkey = _Getch()
while 1:
    k=inkey()
    a=open('key','a')
    a.write(k)
    a.close()
    if k == 'p':
     time.sleep(0.1)
     exit()
new int a[100]

from urllib.request import urlopen as u
q=u('http://kpml.ru/pages/raspisanie/izmeneniya-v-raspisanii').read().decode()
print(q)
~
q=open('site').read()
q=q.split('\n')
q=[[len(w),w] for w in q]
q=max(q)[1]
q=q.replace('&nbsp;','')
q=q.replace('>','>\n')
q=q.replace('<','\n<')
q=q.replace('\n\n','\n')
q=q.split('\n')
q=[[w,'',''] for w in q if w and w[0] != '<']
i=''
for w in q:
 if w[0][:9] == 'Изменения':
  i=w[0].split('-')[1]
  i=i.lower()
  i=i.split()
  i[1]='января февраля марта апреля мая июня июля августа сентября октября ноября декабря'.split().index(i[1])
  i[1]+=1
  i=i[:-1]
 else:
  w[1]=i
for w in q:
 w[0]=w[0].strip()
c=[]
for w in 'АБВ':
 for e in range(1,12):
  c+=[str(e)+w]
e=''
for w in q:
 if w[0] in c:
  e=w[0]
 else:
  w[2]=e
q=[(w[:1]+w[1]+w[2:])[::-1] for w in q if w[1] and w[2]]

#q='\n'.join(q)
~
import json
import httplib

body =b'123'
payload = {'HTML' : body}
hdr = {"content-type": "application/json"}

conn = httplib.HTTPConnection('127.0.0.1:9000')
conn.request('POST', '/', body, hdr)
response = conn.getresponse()
data = response.read()
#q=open('site').read()
from urllib.request import urlopen as u
q=u('http://kpml.ru/pages/raspisanie/izmeneniya-v-raspisanii').read().decode()
q=q.split('\n')
q=[[len(w),w] for w in q]
q=max(q)
q=q[1]
q=q.replace('<','\n<').replace('>','>\n').split('\n')
q=[w for w in q if w]
q='\n'.join(q)
q=q.split('<p')
day=''
q=[[w,''] for w in q if w]
for w in q:
 if 'Изменения' in w[0]:
  day=w[0]
  day=day.split('\n')
  day=[e for e in day if e[:1]!='<']
  day='<!--1-->'.join(day)
 else:
  w[1]=day
q=['\n<!--00000-->\n'.join(w[::-1]) for w in q if w[1]]
q='<!--00000000000000000000000000000-->\n <p'.join(q)
open('csite.html','w').write(q)
import os
print('\n'*(os.get_terminal_size()[1]))
q=0
a=0
d=''
try:
 while 1:
  print('\x1b[2j\x1b[H')
  print(' '*(os.get_terminal_size()[0]*(os.get_terminal_size()[1]-5)))
  print('\x1b[2j\x1b[H')
  if q%2:
   print('\n'*(q//2)+' '*a+'▄')
  else:
   print('\n'*(q//2)+' '*a+'▀')
  print('\n'*(os.get_terminal_size()[1]-q//2-10))
  print('╔═╗')
  print('║ ║')
  print('╚═╝')
  print('\x1b[2j\x1b[H')
  print('\n'*(os.get_terminal_size()[1]-8))
  d=input('║')
  while d!='':
   f=d[0]
   d=d[1:]
   if f=='w' and q>0:
    q-=1
   if f=='a' and a>0:
    a-=1
   if f=='s' and q<2*os.get_terminal_size()[1]-20:
    q+=1
   if f=='d' and a<os.get_terminal_size()[0]-1:
    a+=1
except KeyboardInterrupt:
 print('\x1b[2j\x1b[H')
from http.server import BaseHTTPRequestHandler, HTTPServer
import time
from urllib.request import urlopen as u
from urllib.parse import unquote as uqu
from sys import argv
import os

hostName = "localhost"
hostPort = 9000

class MyServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        path='.'+uqu(self.path)
        #print(path)
        if '?' in path:
         self.send_header("Content-type", "text/html; charset=utf-8")
         self.end_headers()
         self.wfile.write(bytes('<html><head><meta http-equiv="refresh" content="1;URL=."></meta></head></html>', "utf-8"))
        elif os.path.isdir(path):
         self.send_header("Content-type", "text/html; charset=utf-8")
         self.end_headers()
         self.wfile.write(bytes("<html><head><title>"+path+"</title></head>", "utf-8"))
         self.wfile.write(bytes("<body><p>\n", "utf-8"))
         for w in os.listdir(path):
          self.wfile.write(bytes('<form><button','utf-8'))
          self.wfile.write(bytes(' formaction="'+w+'/">','utf-8'))
          self.wfile.write(bytes(w+'/'*int(os.path.isdir(path+w)),'utf-8'))
          self.wfile.write(bytes('</button></form>\n','utf-8'))
         self.wfile.write(bytes("</p></body></html>", "utf-8"))
        elif os.path.isfile(path):
         self.send_header("Content-type", "file/file")
         self.end_headers()
         q=path
         q=open(q,'br').read()
         self.wfile.write(q)
        elif os.path.isfile(path[:-1]) and path[-1] == '/':
         self.send_header("Content-type", "text/html; charset=utf-8")
         self.end_headers()
         self.wfile.write(bytes("<html><head><title>"+path+"</title></head>", "utf-8"))
         self.wfile.write(bytes("<body><p>download<br>", "utf-8"))
         self.wfile.write(bytes('<a href="'+path[1:-1]+'">'+path[1:-1]+'</a>','utf-8'))
         self.wfile.write(bytes("</p></body></html>", "utf-8"))
        else:
         self.send_header("Content-type", "text/html; charset=utf-8")
         self.end_headers()
         self.wfile.write(bytes("<html><head><title>"+path+"</title></head>", "utf-8"))
         self.wfile.write(bytes('<body><p>not found<br>'+path[1:]+'</p></body></html>', "utf-8"))

myServer = HTTPServer((hostName, hostPort), MyServer)
print(time.asctime(), "Server Starts - %s:%s" % (hostName, hostPort))

try:
    myServer.serve_forever()
except KeyboardInterrupt:
    pass

myServer.server_close()
print(time.asctime(), "Server Stops - %s:%s" % (hostName, hostPort))
from http.server import BaseHTTPRequestHandler, HTTPServer
import time

hostName = "localhost"
hostPort = 9000

class MyServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(bytes("<html><head><title>Title goes here.</title></head>", "utf-8"))
        self.wfile.write(bytes("<body><p>This is a test.</p>", "utf-8"))
        self.wfile.write(bytes("<p>You accessed path: %s</p>" % self.path, "utf-8"))
        self.wfile.write(bytes("</body></html>", "utf-8"))

myServer = HTTPServer((hostName, hostPort), MyServer)
print(time.asctime(), "Server Starts - %s:%s" % (hostName, hostPort))

try:
    myServer.serve_forever()
except KeyboardInterrupt:
    pass

myServer.server_close()
print(time.asctime(), "Server Stops - %s:%s" % (hostName, hostPort))
import os,time,random,threading,sys,tty,termios
class _Getch:
    def __call__(self):
            fd = sys.stdin.fileno()
            old_settings = termios.tcgetattr(fd)
            try:
                tty.setraw(sys.stdin.fileno())
                ch = sys.stdin.read(1)
            finally:
                termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
            return ch

os.system('python game.py &')
while 1:
    inkey = _Getch()
    k=inkey()
    a=open('key','a')
    a.write(k)
    a.close()
    if k == 'p':
     time.sleep(0.1)
     exit()
term=os.get_terminal_size
os.system('>key')
print('\n'*(term()[1]-2))
ls=0
q=5
a=5
f='d'
lf='d'
sn=[[5,w] for w in range(5,30)][::-1]
eq=random.randint(0,term()[1]*2-11)
ea=random.randint(0,term()[0]-1)
fc=list(range(30,38))+list(range(90,98))
bc=list(range(40,48))+list(range(100,108))
bd=[]
bdc=0
bdi=0
bdl=0
bdm=5
bdw=200
tab=8
fs=''
ma=0
aver=0
llen=0
ma=len(sn)
aver=len(sn)/1.0
llen=1
col=0
ons=[]
while 1:
 if col==1:
  print('\x1b['+str(random.choice(fc))+';'+str(random.choice(bc))+'m')
 if col==2:
  print('\x1b[5;'+str(random.choice(fc))+';'+str(random.choice(bc))+'m')
 print('\x1b[2j\x1b[H')
 ns=sn[:]
 ns+=[[ea,eq]]
 ns+=bd
 pns=[w for w in ns if w not in ons]
 mns=[w for w in ons if w not in ns]
 print('\x1b[33m')
 for w in pns:
  if w[1]%2:
   if [w[0],w[1]-1] in ns:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H█')
   else:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H▄')
  else:
   if [w[0],w[1]+1] in ns:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H█')
   else:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H▀')
 for w in mns:
  if w[1]%2:
   if [w[0],w[1]-1] in ns:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H▀')
   else:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H ')
  else:
   if [w[0],w[1]+1] in ns:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H▄')
   else:
    print('\x1b['+str(w[1]//2+1)+';'+str(w[0]+1)+'H ')
 ons=ns[:]
 print('\x1b[35m')
 print('\x1b['+str(term()[1]-3)+';0H'+'  '*term()[0])
 print('\x1b['+str(term()[1]-2)+';0H'+'now:',len(sn),'max:',ma,'aver:',aver)
 print('\x1b['+str(term()[1]-3)+';0H'+'█'*(bdl*term()[0]//bdw)+int(bool(max(bdl,0)))*chr(9615-max(bdl,0)*term()[0]*8//bdw%8))
 print('\x1b['+str(term()[1]-4)+';0H'+'═'*term()[0])
 if bdc==bdm:
  bdq=random.randint(1,term()[1]*2-12)
  bda=random.randint(1,term()[0]-2)
  bd+=[[bda-1,bdq-1]]
  bd+=[[bda+1,bdq-1]]
  bd+=[[bda-1,bdq+1]]
  bd+=[[bda+1,bdq+1]]
  bd+=[[bda+1,bdq]]
  bd+=[[bda-1,bdq]]
  bd+=[[bda,bdq+1]]
  bd+=[[bda,bdq-1]]
  bd+=[[bda,bdq]]
  bdc=bdm+1
  bdl=bdw
 elif bdc==0:
  bd=[]
 if bdl==0:
  bd=[]
  bdc=0
 bdl-=1
 nls=int(os.popen('ls -l key').read().split()[4])
 z=open('key')
 z.read(ls)
 fs+=z.read(nls-ls)
 z.close()
 ls=nls
 fs=''.join([fff for fff in fs if fff in 'asdwp'])
 if fs== '':
  fs=f
 if 1:
  f=fs[0]
  fs=fs[1:]
  if   f=='w':
   if lf == 's':
    q+=1
   else:
    q-=1
    lf=f
   q%=term()[1]*2-10
  elif f=='a':
   if lf == 'd':
    a+=1
   else:
    a-=1
    lf=f
   a%=term()[0]
  elif f=='s':
   if  lf == 'w':
    q-=1
   else:
    q+=1
    lf=f
   q%=term()[1]*2-10
  elif f=='d':
   if lf == 'a':
    a-=1
   else:
    a+=1
    lf=f
   a%=term()[0]
  elif f=='p':
   print('\x1b[0m')
   print('\x1b[0;0H'+' '*term()[0]*(term()[1]-2))
   print('\x1b[2j\x1b[0;0H',end='')
   exit()
 if [a,q] in sn:
  sn=sn[sn.index([a,q]):]
  ma=max(ma,len(sn)+bdi)
  aver=(aver*llen+len(sn))/(llen+1)
  llen+=1
 if ea==a and eq==q:
  bdc+=1
  eq=random.randint(0,term()[1]*2-11)
  ea=random.randint(0,term()[0]-1)
  sn=sn[:]+[[a,q]]
  ma=max(ma,len(sn)+bdi)
  aver=(aver*llen+len(sn))/(llen+1)
  llen+=1
 elif [a,q] in bd:
  bdi=15*bdl//bdw
  bdm=10*bdl//bdw+1
  bd=[]
  bdc=0
  bdl=0
  bdi-=1
  sn=sn[:]+[[a,q]]
  ma=max(ma,len(sn)+bdi)
  aver=(aver*llen+len(sn))/(llen+1)
  llen+=1
 elif bdi:
  bdi-=1
  sn=sn[:]+[[a,q]]
  ma=max(ma,len(sn)+bdi)
  aver=(aver*llen+len(sn))/(llen+1)
  llen+=1
 else:
  sn=sn[1:]+[[a,q]]
 #time.sleep(0.5)
import time,sys,tty,termios,os
while 1:
 fd = sys.stdin.fileno()
 old_settings = termios.tcgetattr(fd)
 try:
  tty.setraw(sys.stdin.fileno())
  ch = sys.stdin.read(1)
 finally:
  termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
 k=ord(ch)
 q=0
 while k!=0:
  q+=1
  k//=2
 print(ord(ch),2**q,2**q-ord(ch),q,ch)
 if ch == 'p':
  time.sleep(0.1)
  exit()

import sys
sys.stderr.write("\x1b[2J\x1b[H")
q=1
while 1:
 q+=1
 a=list(set([w*w%q for w in range(q)]))
 s=list(set([w*w*w%q for w in range(q)]))
 t=[]
 for w in a:
  for e in s:
   t+=[(w+e)%q]
 t=list(set(t))
 t.sort()
 if t!=list(range(q)):
  print(q)
from time import time
from time import sleep
from sys import argv
y=argv[1]
y=y.split(':')
y=map(int,y)
y=list(y)
y=y[0]*3600+y[1]*60+y[2]
w=y
while 1:
 sleep(0.001)
 t=time()+3*3600
 y=w-t
 y%=3600*24
 t=y
 y=int(y)
 print(y//3600%24,y//60%60,y%60,str(t%1)[2:10],end='\r')
from time import sleep as sl
print('1234\r',end='')
sl(2)
print('\x1b[0;33m456\x1b[0m')
from os import system as sh
q=input()
q=q.split('#code=')[-1]
token=q

#token='0aa8e3ce455d115df9'
from urllib.request import urlopen
from json import loads
from json import dumps
from urllib.parse import quote
from time import sleep
from time import time
from time import asctime

def api(path,data):
 sleep(1/3)
 data=data.encode()
 global token
 return loads(urlopen('https://api.vk.com/method/'+path+'v=5.101&access_token='+token,data=data).read().decode())

def look(a=0):
 q=api('messages.getConversations?count=200&filter=unread&','')
 q=q['response']['items']
 q=[[w['conversation']['peer']['id'],w['last_message']['text'],w] for w in q if w['conversation']['can_write']['allowed']]
 if a==0:
  q=[w[:2] for w in q]
 q=[[str(w[0])]+w[1:] for w in q]
 q=[[w[0],w[1].lower(),w[1]] for w in q]
 return q

def send(id,text=None):
  global q
  if text==None:
   id,text=q[0],id
  text=str(text)
  qq=api('messages.send?random_id='+str(int(time()*2**28))+'&user_id='+str(id)+'&','message='+text)
  if list(qq.keys())!=['response']:
   print(qq)

def look(a=0):
 q=api('messages.getConversations?count=200&filter=unread&','')
 print(q)
 q=q['response']['items']
 q=[[w['conversation']['peer']['id'],w['last_message']['text'],w] for w in q if w['conversation']['can_write']['allowed']]
 if a==0:
  q=[w[:2] for w in q]
 q=[[str(w[0])]+w[1:] for w in q]
 q=[[w[0],w[1].lower(),w[1]] for w in q]
 return q

look()
for w in range(108):
 for e in range(108):
  #print('\x1b['+str(w)+';'+str(e)+'m['+str(w)+' '*(4-len(str(w)))+str(e)+' '*(3-len(str(e)))+']\x1b[0m',end=' ')
  print('\x1b['+str(w)+';'+str(e)+'m00\x1b[0m',end='')
 print()
